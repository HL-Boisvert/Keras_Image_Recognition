# -*- coding: utf-8 -*-
"""Masqrew_30_05.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-E1Rj3ZlFlxMrsCjxCU-exayaNC2egLj
"""

import matplotlib.pyplot as plt
import tensorflow as tf

!unzip -q mask.zip
"""
!mkdir mask
!mkdir mask/mask
!mkdir mask/no_mask
"""

img_size = (300, 300)
batch_size = 32

#model = tf.keras.models.load_model('300x300_25epochs.h5')

train_ds = tf.keras.preprocessing.image_dataset_from_directory(
    "mask",
    validation_split=0.2,
    subset="training",
    seed = 1337,
    image_size=img_size,
    batch_size=batch_size,
)
val_ds = tf.keras.preprocessing.image_dataset_from_directory(
    "mask",
    validation_split=0.2,
    subset="validation",
    seed = 1337,
    image_size=img_size,
    batch_size=batch_size,
)

plt.figure(figsize=(10, 10))
for images, labels in train_ds.take(1):
    for i in range(9):
        ax = plt.subplot(3, 3, i + 1)
        plt.imshow(images[i].numpy().astype("uint8"))
        plt.title("mask" if (int(labels[i])==0) else "no_mask" )
        plt.axis("off")

data_augmentation = tf.keras.Sequential(
    [
        tf.keras.layers.experimental.preprocessing.RandomFlip("horizontal"),
        tf.keras.layers.experimental.preprocessing.RandomRotation(0.1),
    ]
)

train_ds = train_ds.prefetch(buffer_size=32)
val_ds = val_ds.prefetch(buffer_size=32)

def make_model(input_shape, num_classes):
    inputs = tf.keras.Input(shape=input_shape)

    # Block de Data Augmentation
    x = data_augmentation(inputs)

    # Block d'entrée
    x = tf.keras.layers.experimental.preprocessing.Rescaling(1.0 / 255)(x)
    x = tf.keras.layers.Conv2D(32, 3, strides=2, padding="same")(x)
    x = tf.keras.layers.BatchNormalization()(x)
    x = tf.keras.layers.Activation("relu")(x)

    x = tf.keras.layers.Conv2D(64, 3, padding="same")(x)
    x = tf.keras.layers.BatchNormalization()(x)
    x = tf.keras.layers.Activation("relu")(x)

    previous_block_activation = x  # On met de côté le residual

    for size in [128, 256, 512, 728]:
        x = tf.keras.layers.Activation("relu")(x)
        x = tf.keras.layers.SeparableConv2D(size, 3, padding="same")(x)
        x = tf.keras.layers.BatchNormalization()(x)

        x = tf.keras.layers.Activation("relu")(x)
        x = tf.keras.layers.SeparableConv2D(size, 3, padding="same")(x)
        x = tf.keras.layers.BatchNormalization()(x)

        x = tf.keras.layers.MaxPooling2D(3, strides=2, padding="same")(x)

        # Residual du modèle
        residual = tf.keras.layers.Conv2D(size, 1, strides=2, padding="same")(
            previous_block_activation
        )
        x = tf.keras.layers.add([x, residual])  # On ajoute le residual
        previous_block_activation = x  # On met de côté le prochain residual

    x = tf.keras.layers.SeparableConv2D(1024, 3, padding="same")(x)
    x = tf.keras.layers.BatchNormalization()(x)
    x = tf.keras.layers.Activation("relu")(x)

    x = tf.keras.layers.GlobalAveragePooling2D()(x)

    activation = "sigmoid"
    units = 1

    x = tf.keras.layers.Dropout(0.5)(x)
    outputs = tf.keras.layers.Dense(units, activation=activation)(x)
    return tf.keras.Model(inputs, outputs)


model = make_model(input_shape=img_size + (3,), num_classes=2)

tf.keras.utils.plot_model(model, show_shapes=True) #On affiche le modèle

epochs = 25

callbacks = [
    tf.keras.callbacks.ModelCheckpoint("save_at_{epoch}.h5"),
]
model.compile(
    optimizer=tf.keras.optimizers.Adam(1e-3),
    loss="binary_crossentropy",
    metrics=["accuracy"],
)
model.fit(
    train_ds, epochs=epochs, callbacks=callbacks, validation_data=val_ds,
)

#model.save("300x300_25epochs.h5")

#model = tf.keras.models.load_model('300x300_25epochs.h5')

history = model.fit(train_ds, epochs=epochs, callbacks=callbacks, validation_data=val_ds,)
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()
# summarize history for loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

"""for images, labels in val_ds.take(-1):
    for i in range(len(images)):
        augmented_image = data_augmentation(tf.expand_dims(images[i], 0))
        img_array = tf.keras.preprocessing.image.img_to_array(augmented_image[0])
        img_array = tf.expand_dims(img_array, 0)
        predictions = model.predict(img_array)
        score = predictions[0]
        if ( 100 * float(score) > 10 and 100 * float(score) < 90 ):
            plt.figure(figsize=(3, 3))
            plt.imshow(augmented_image[0].numpy().astype("uint8"))
            plt.axis("off")
            plt.show()
            print(f"{100 * (1 - float(score))} percent mask and {100 * float(score)} percent no mask.\n\n")"""